<?php

namespace AppBundle\Controller;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use AppBundle\Form\Type\CarteType;
use AppBundle\Form\Type\InformationsType;
use AppBundle\Entity\User;
use AppBundle\Entity\Card;
use AppBundle\Entity\RendezVous;
use AppBundle\Service\FileUploader;

class GestionController extends Controller {

    /**
     * @Route("/gestion", name="gestion")
    */
    public function indexAction(Request $request) {

      $total = false;

      $user = $this->getUser();

      $myCard = $this->getDoctrine()->getRepository('AppBundle:Card')->findBy(array('idUser' => $user->getId(), 'valider' => '1'));

      $listRvd = $this->getDoctrine()->getRepository('AppBundle:RendezVous')->findBy(array("idCoiffeur" => $this->getUser(), 'valider' => null));

      $listRvdValider = $this->getDoctrine()->getRepository('AppBundle:RendezVous')->findBy(array("idCoiffeur" => $this->getUser(), 'valider' => 1));

      $listRvdRefuse = $this->getDoctrine()->getRepository('AppBundle:RendezVous')->findBy(array("idCoiffeur" => $this->getUser(), 'valider' => 0));

      $listNotes = $this->getDoctrine()->getRepository('AppBundle:Note')->findBy(array("idCoiffeur" => $this->getUser()));

      $i = 0;
      foreach ($listNotes as $uneNote) {

        $i++;

        $note = $uneNote->getNote();

        $total += $note;

      }

      if($total == false){

        $moyenne = 0;

      } else {

        $moyenne = $total / $i;

      }

      $card = new Card;
      $carteForm = $this->createForm(CarteType::class);
      $carteForm->handleRequest($request);

      if ($carteForm->isSubmitted() && $carteForm->isValid()) {

       $data = $carteForm->getData();

       $em = $this->getDoctrine()->getManager();

       $card->setName($data['name']);
       $card->setCategory($data['category']);
       $card->setPrice($data['price']);
       $card->setValider(1);
       $card->setIdUser($user);

       $em->persist($card);
       $em->flush();

       return $this->redirectToRoute('gestion');

     }

     return $this->render('@App/gestion/gestion.html.twig', [
      'card' => $myCard,
      'form' => $carteForm->createView(),
      'rdvs' => $listRvd,
      'rdvvs' => $listRvdValider,
      'rdvrs' => $listRvdRefuse,
      'notes' => $listNotes,
      'moyenne' => $moyenne
    ]);
   }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
      return md5(uniqid());
    }

    /**
     * @Route("/cancel/rdv/{id}", name="cancelRdv")
    */
    public function cancelRvd($id){

      $RdvClient = $this->getDoctrine()->getRepository('AppBundle:RendezVous')->findOneBy(array("id" => $id));

      $client = $RdvClient->getIdUser();

      $em = $this->getDoctrine()->getManager();

      $rdv = $em->getReference('AppBundle:RendezVous', $id);

      $rdv->setValider(0);

      $em->persist($rdv);
      $em->flush($rdv);

      $message = "Le rendez-vous pour le client ".$client->getFirstName()." ".$client->getLastName()." a été annulé";

      return new Response(json_encode(array('message' => $message)));

    }

    /**
     * @Route("/valider/rdv/{id}", name="validerRdv")
    */
    public function validerRvd($id){

      $RdvClient = $this->getDoctrine()->getRepository('AppBundle:RendezVous')->findOneBy(array("id" => $id));

      $client = $RdvClient->getIdUser();


      $em = $this->getDoctrine()->getManager();

      $rdv = $em->getReference('AppBundle:RendezVous', $id);

      $rdv->setValider(1);

      $em->persist($rdv);
      $em->flush($rdv);


      $message = "Le rendez-vous pour le client ".$client->getFirstName()." ".$client->getLastName()." a été accepté";

      return new Response(json_encode(array('message' => $message)));

    }

    /**
     * @Route("/delete/card/{id}", name="deleteCard")
    */
    public function deleteCard($id){

      $em = $this->getDoctrine()->getManager();

      $card = $em->getReference('AppBundle:Card', $id);

      $card->setValider(0);

      $em->persist($card);
      $em->flush($card);


      $message = "Vous avez supprimer '' avec succèes ";

      return new Response(json_encode(array('message' => $message, 'result' => 'success')));

    }

    /**
     * @Route("/edit/card/{id}", name="editCard")
    */
    public function editCard(Request $request, Card $card) {

      $carteForm = $this->createForm(CarteType::class, $card);
      $carteForm->handleRequest($request);


      if ($carteForm->isSubmitted() && $carteForm->isValid()) {

       $em = $this->getDoctrine()->getManager();
       $em->persist($card);
       $em->flush();

       return $this->redirectToRoute('gestion');

     }

     return $this->render('@App/gestion/edit.html.twig', [
      'Card' => $card,
      'form' => $carteForm->createView(),
    ]);

   }

    /**
     * @Route("/profil/coiffeur", name="profilCoiffeur")
     */
    public function profilCoiffeur(Request $request, FileUploader $fileUploader)
    {

      $infoFormSuccess = false;
      $user = $this->getUser();

      $infoForm = $this->createForm(InformationsType::class, $user);
      $infoForm->handleRequest($request);

      if ($infoForm->isSubmitted() && $infoForm->isValid()) {

       $data = $infoForm->getData();

       $file = $user->getAvatar();
       $fileName = $fileUploader->upload($file);

       $em = $this->getDoctrine()->getManager();

            //on recupére notre objet user
            //on le modifie
       $user->setAvatar($fileName);
       $user->setFirstName($data->getFirstName());
       $user->setLastName($data->getLastName());
       $user->setCity($data->getCity());
       $user->setBirthday($data->getBirthday());
       $user->setBio($data->getBio());

       $em->persist($user);
       $em->flush();

       $infoFormSuccess = true;

     }

     return $this->render('@App/gestion/profil.html.twig', [
      'infoFormSuccess' => $infoFormSuccess,
      'formInfo' => $infoForm->createView()
    ]);
   }

 }
